#include "common.h"
//#include "Blur.h"
//#include "mblur.h"
#include "filmGrainPass.h"
#include "dof.h"
#include "lensFlaresPass.h"

struct 	v2p
{
  float4 tc0: 		TEXCOORD0;	// Center
  float4 tc1: 		TEXCOORD1;	// LT 		 
  float4 tc2: 		TEXCOORD2;	// RB
  float4 tc3: 		TEXCOORD3;	// RT 
  float4 tc4: 		TEXCOORD4;	// LB
  float4 tc5:		TEXCOORD5;	// Left	/ Right	
  float4 tc6:		TEXCOORD6;	// Top  / Bottom 
};

//////////////////////////////////////////////////////////////////////////////////////////
uniform sampler2D 	s_distort;
uniform sampler2D 	SamplerSprite;
//uniform float4 		c_tnmp_defog;
//#include "tonemapPass.h"
#define	EPSDEPTH	0.001
//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
float4 	main		( v2p I )	: COLOR
{
#ifdef 	USE_DISTORT
  	float 	depth 	= tex2D 	(s_position, 	I.tc0).z;
	float4 	distort	= tex2D		(s_distort, 	I.tc0)	;
	float2	offset	= (distort.xy-.5h)*def_distort		;
	float2	center	= I.tc0 + offset;
	float 	depth_x	= tex2D 	(s_position, center).z	;
	if ((depth_x+EPSDEPTH)<depth)	center	= I.tc0;	// discard new sample
#else
	float2	center 	= I.tc0		;
#endif
    //half3 	img 	= tex2D		(s_image, center);
	float4 	bloom	= tex2D		(s_bloom, center);
	// advanced blooming
			// without blur!
	//bloom 	+= BloomPass0 	(center);
	//bloom 	+= BloomPass1 	(center);
	//bloom 	+= BloomPass2 	(center);
	//bloom 	+= BloomPass3 	(center);
	//bloom 	+= BloomPass4 	(center);
	//bloom 	+= LensFlarePass0 	(center);
	//bloom 	+= LensFlarePass1 	(center);
	//bloom 	+= LensFlarePass2 	(center);
	//bloom 	+= LightingCombine 	(center);
	// end advanced blooming
	
	// chromaticAbberationPass
//#ifdef USE_CA	
//	float 	amount 	= .001f; //.004f;
//	float2 	center_offset 	= distance(float2(.5f, .5f), center) * float2(amount, amount); 
//	float3 	img;
//			img.r 	= tex2D 	(s_image, center + center_offset).r;
//			img.g 	= tex2D 	(s_image, center).g;
//			img.b 	= tex2D 	(s_image, center - center_offset).b;
//#else // USE_CA			
	//half3 	img 	= tex2D		(s_image, center);
	float3	img		= dof 	(center);
//#endif // USE_CA			

	// tonemapPass
	//img 	= tonemapPass 	(img);
	// lenFlaresPass
	#ifdef USE_LENSFLARES
	float3 	cLensFlarePass 	= LensFlarePass0 	(img, center);
			//cLensFlarePass 	= LensFlarePass1 	(cLensFlarePass, center);
			//cLensFlarePass 	= LensFlarePass2 	(cLensFlarePass, center);
	img 	= cLensFlarePass;		
	//img 	= LensFlarePass0 	(img, center);
	//float3 	cLensDirtPass 	= bloom.rgb*tex2D(SamplerDirt, center);
	//img 	+= cLensDirtPass*2;
	#endif
	
	// lensDirtPass 
	//half3 	cLensDirtPass 	= cLensFlarePass*tex2D(SamplerDirt, center);
	//img 	+= cLensDirtPass*2;
	// filmGrain
	#ifdef USE_FILMGRAIN
	 img 	= filmGrainPass 	(img, center);
	#endif
	// vignette
	img 	*= 1.4 - ( 1.4 * saturate(distance(center, float2(.5f, .5f))  ));
	// chromaticAbberationPass
	//half 	amount 	= .004f;
	//half2 	center_offset 	= distance(half2(.5f, .5f), center) * half2(amount, amount); 
	
	//img 	= mblur		(center,tex2D(s_position,I.tc0),img.rgb);

#ifdef 	USE_DISTORT
 	float3	blurred	= bloom*def_hdr	;
			img		= lerp	(img,blurred,distort.z);
#endif

 	return 	combine_bloom		(img,bloom);
}

/*
#define NEAR 		0.2h
#define MINDIST 	0.4h
#define MAXDIST 	100.h
#define MAXCOF		5.h
#define MAXCOF_NEAR	100.h
#define EPSDEPTH	0.0001h
half4 	main		( v2p I )	: COLOR
{
	// Scale tap offsets based on render target size
	float2	center 		= I.tc0;
	half 	depth		= tex2D(s_position,center).z;
	half 	blur		= saturate( (depth-MINDIST)/(MAXDIST-MINDIST) );	blur*=blur;
	//half 	blur_near	= pow(saturate( 1-(depth-NEAR)/MINDIST ), 2) * MAXCOF_NEAR;
	//half 	blur 		= (blur_near+blur_far);	
	half2 	scale 	= half2	(.5f / 1024.h, .5f / 768.h) * MAXCOF * blur;

	// poison
	half2 	o  [12];
		o[0]	= half2(-0.326212f , -0.405810f)*scale;
		o[1] 	= half2(-0.840144f , -0.073580f)*scale;
		o[2] 	= half2(-0.695914f ,  0.457137f)*scale;
		o[3] 	= half2(-0.203345f ,  0.620716f)*scale;
		o[4] 	= half2( 0.962340f , -0.194983f)*scale;
		o[5] 	= half2( 0.473434f , -0.480026f)*scale;
		o[6] 	= half2( 0.519456f ,  0.767022f)*scale;
		o[7] 	= half2( 0.185461f , -0.893124f)*scale;
		o[8] 	= half2( 0.507431f ,  0.064425f)*scale;
		o[9] 	= half2( 0.896420f ,  0.412458f)*scale;
		o[10] 	= half2(-0.321940f , -0.932615f)*scale;
		o[11] 	= half2(-0.791559f , -0.597710f)*scale;

	// sample 
	half3	sum 	= tex2D(s_image,center);
	half 	contrib	= 1.h;
	for (int i=0; i<12; i++)
	{
		float2 	tap 		= center + o[i];
		half4	tap_color	= tex2D	(s_image,tap);
		half 	tap_depth 	= tex2D	(s_position,tap).z;
		half 	tap_contrib	= 1.h;	//(tap_depth>depth)?1.h:0.h;
			sum 		+= tap_color	* tap_contrib;
			contrib		+= tap_contrib	;
	}
	return 	half4	(sum/contrib,1);
}
*/
